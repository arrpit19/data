require(RPostgreSQL)
require(getPass)
library(tidyverse)
library(sf)            # <- optional
library(plotly)        # <- optional
library(lubridate)
library(data.table)
library(zoo)
# If data preprocessing is needed, do it here.
# If you have specific functions, placed them here.
# If this code chunk is not needed, delete it.
# Load data from Github (then eval = TRUE)
raw <- read_csv("https://raw.githubusercontent.com/data-hydenv/data/master/hobo/2023/raw/10350060.csv", skip = 1)
cal <- read_csv("https://raw.githubusercontent.com/data-hydenv/data/master/hobo/2023/calibration.csv", skip = 3)
cal_hobo_digit <- which(parse_date_time(raw$`Datum Zeit, GMT+01:00`, "%m.%d.%y %H:%M:%S %p", tz = "CET" ) == force_tz(cal$dttm))
t_cal_hobo <- raw$`Temp., °C (LGR S/N: 10350060, SEN S/N: 10350060)`[cal_hobo_digit]
t_delta <- t_cal_hobo - cal$T
raw_1 <- raw[1:4] %>%
mutate(dttm1 = parse_date_time(raw[[2]], "%m.%d.%y %H:%M:%S %p", tz = "CET")) %>%
filter(dttm1 >= "2022-12-01 00:00:00", dttm1 <= "2023-01-07 23:50:00") %>%
mutate(dttm = format(dttm1,"%Y-%m-%d %H:%M")) %>%
mutate(id = `Anz.`-138) %>% # id starts by 1
mutate(temp = round(`Temp., °C (LGR S/N: 10350060, SEN S/N: 10350060)`- t_delta,digits = 3)) %>%
mutate(lux = `Intensität, Lux (LGR S/N: 10350060, SEN S/N: 10350060)`) %>%
select(id ,dttm ,temp ,lux)
write_csv(raw_1,file ="C:/Users/anton/Desktop/Alles/Master/Data Collection and Storage/data/hobo/2023/10_minutes/10350060.csv")
a <- Sys.time()
read_csv('https://raw.githubusercontent.com/data-hydenv/data/master/hobo/2023/10_minutes/10350060.csv')
b <- Sys.time()
c <-Sys.time()
read.table('https://raw.githubusercontent.com/data-hydenv/data/master/hobo/2023/10_minutes/10350060.csv')
d <- Sys.time()
e <- Sys.time()
fread('https://raw.githubusercontent.com/data-hydenv/data/master/hobo/2023/10_minutes/10350060.csv')
f <- Sys.time()
as_tibble (c(b-a,d-c,f-e)) %>%
mutate(import_function = c("read_csv()", "read.table()", "fread()")) %>%
rename(duration = value)
# Load data from Github (then eval = TRUE)
data <- fread('https://raw.githubusercontent.com/data-hydenv/data/master/hobo/2023/10_minutes/10350060.csv') %>%
mutate(dttm = parse_date_time(dttm, orders = "%Y-%m-%d %H:%M" )) %>%
mutate(dttm = force_tz(dttm, tz = "CET"))
head(data)
ggplot(data = data, mapping = aes(x = dttm, y = temp)) +
geom_line()
ggplot(data = data, mapping = aes(x = dttm, y = lux)) +
geom_line()
data <- data %>%
mutate(qc1 = case_when(temp > 70 &
temp < -20 ~ 1,
TRUE ~ 0)) #%>%
# mutate(qc1l = case_when(temp > 320000 &
#                         temp < 0 ~ 1,
#                         TRUE ~ 0))
sum(data$qc1)
#sum(data$qc1l)
data <- data %>%
mutate(qc2 = case_when(abs(lag(temp) - temp) < 1 ~ 0,TRUE ~ 1))
sum(data$qc2)
data[which(data$qc2 == 1),]
# code for qcp3 here
data <- data %>%
mutate(qc3 = case_when(rollmax(temp, k = 6 , fill = NA, align = "right",na.rm = TRUE) - rollapply(temp, 6 , fill = NA, align = "right", FUN = min, na.rm = TRUE) < 0.1 ~ 1, TRUE ~ 0))
sum(data$qc3)
# code for qcp4 here
data <- data %>%
mutate(SIC = case_when(lux <= 10 ~ "night",
lux > 10 & lux <= 500 ~ "sunriseorsunset",
lux > 500 & lux <= 2000 ~ "overcast(full)",
lux > 2000 & lux <= 15000 ~ "overcast(light)",
lux > 15000 & lux <= 20000 ~ "clearsky(shade)",
lux > 20000 & lux <= 50000 ~ "sunshine",
lux > 50000  ~ "sunshine(bright)",))
data %>%
count(SIC)
qc4_1 <- rep(0, length(data$SIC))
qc4_2 <- rep(0, length(data$SIC))
for(i in 2:length(data$SIC)){
if(i == "sunshine"){
qc4_1[i] <- 1 &
qc4_1[i-1] <- 1 &
qc4_1[i+1] <- 1}
}
for(i in 4:length(data$SIC)){
if(i == "sunshine(bright)"){
qc4_2[i] <- 1 &
qc4_2[i-1] <- 1 &
qc4_2[i+1] <- 1 &
qc4_2[i-2] <- 1 &
qc4_2[i+2] <- 1 &
qc4_2[i-3] <- 1 &
qc4_2[i+3] <- 1}
}
data <- data %>%
mutate(qc4_1 = qc4_1) %>%
mutate(qc4_2 = qc4_2)
data %>%
count(qc4_1)
data %>%
count(qc4_2)
# code for summarizing here
qc_df <- data %>%
mutate(qc_tot = qc1 + qc2 + qc3 + qc4_1 + qc4_2 ) %>%
mutate(qc_flag = if_else(qc_tot >= 1, 1, 0))
#mutate(flag_txt = if_else(qc_tot > 1, "bad", "good"))
data_plot <- data %>%
pivot_longer(
cols = c("qc1","qc2","qc3","qc4_1","qc4_2"),
names_to = "category", values_to ="sum") %>%
group_by(category) %>%
summarise(sum_qc = sum(sum))
ggplot(data_plot, mapping = aes(x = category, y=sum_qc ))+
geom_bar(stat = "identity")
print(data_plot)
qc_df
# code for aggregation here
hobo_hourly <- qc_df %>%
mutate(date = as.Date(dttm, tz ="CET")) %>%
mutate(day = day(dttm)) %>%
mutate(hour = hour(dttm)) %>%
mutate(date_time = floor_date(dttm, "hour")) %>%
group_by(date_time) %>%
summarise(temp = mean(temp), lux = mean(lux), qc_flag = sum(qc_flag)) %>%
mutate(th = round(ifelse(qc_flag > 1, NA, temp), digits =3)) %>%
select(date_time, th)
wd <- "C:/Users/anton/Desktop/Alles/Master/Data Collection and Storage/Projekt/"
wbi <- fread(paste0(wd,"meteo/WBI_meteo.csv")) %>%
mutate(date_time = parse_date_time(datetime,orders = "%Y-%m-%d %H:%M:%S", tz="CET")) %>%
filter(date_time >= "2022-12-01 00:00:00", date_time <= "2023-01-07 23:00:00") %>%
rename(temp_wbi = "Temperatur +20cm(avg)") %>%
select(date_time, temp_wbi)
alu <- fread(paste0(wd,"meteo/Freiburg_Garten_2022-12-01_2023-01-08.csv")) %>%
mutate(date_time = parse_date_time(Lokalzeit,orders = "%Y-%m-%d %H:%M:%S", tz="CET")) %>%
filter(date_time >= "2022-12-01 00:00:00", date_time <= "2023-01-07 23:00:00") %>%
rename(temp = "Lufttemperatur (°C)") %>%
mutate(temp = ifelse(temp == -999, NA,temp)) %>%
mutate(temp_alu = round(temp, digits = 3)) %>%
select(date_time, temp_alu)
dwd_urb <- fread(paste0(wd,"meteo/DWD_13667/produkt_air_temperature_13667_akt.txt")) %>%
mutate(date_time = parse_date_time(MESS_DATUM,orders = "%Y%m%d%H", tz="CET")) %>%
mutate(date_time = with_tz(date_time, tz = "CET")) %>%
filter(date_time >= "2022-12-01 00:00:00", date_time <= "2023-01-07 23:00:00") %>%
rename(temp = "LUFTTEMPERATUR") %>%
mutate(temp_dwd_urb = ifelse(temp == -999, NA,temp)) %>%
select(date_time, temp_dwd_urb)
dwd <- fread(paste0(wd,"meteo/DWD_1443/produkt_tu_stunde_20210712_20230112_01443.txt")) %>%
mutate(date_time = parse_date_time(MESS_DATUM,orders = "%Y%m%d%H")) %>%
mutate(date_time = with_tz(date_time, tz = "CET")) %>%
filter(date_time >= "2022-12-01 00:00:00", date_time <= "2023-01-07 23:00:00") %>%
rename(temp = "TT_TU") %>%
mutate(temp_dwd = ifelse(temp == -999, NA,temp)) %>%
select(date_time, temp_dwd)
summary(dwd)
summary(dwd_urb)
summary(wbi)
summary(alu)
hoho <- hobo_hourly %>%
left_join(y = dwd, by = "date_time",  ) %>%
left_join(y = dwd_urb, by = "date_time") %>%
left_join(y = wbi, by = "date_time") %>%
left_join(y = alu, by = "date_time")
hoho_plot <- hoho %>%
pivot_longer(cols = -c("date_time"),names_to ="station", values_to = "temp" )
p <- ggplot(hoho_plot, mapping = aes(x = date_time, y = temp,color = station))
p +
geom_line() +
theme_minimal() +
theme(legend.position = c(0.85,0.25))+
labs(title = "Comparison across stations",
subtitle = "",
x = "Date",
y = "Temperature (°C)")
summary(hoho)
lin_reg_dwd     <- lm(hoho$th~hoho$temp_dwd)
lin_reg_dwd_urb <- lm(hoho$th~hoho$temp_dwd_urb)
lin_reg_alu     <- lm(hoho$th~hoho$temp_alu)
lin_reg_wbi     <- lm(hoho$th~hoho$temp_wbi)
r_square <- as_tibble(summary(lin_reg_dwd)$r.squared) %>%
rename(r_dwd = value) %>%
mutate(r_dwd_urb = summary(lin_reg_dwd_urb)$r.squared) %>%
mutate(r_alu = summary(lin_reg_alu)$r.squared) %>%
mutate(r_wbi = summary(lin_reg_wbi)$r.squared)
a <- as.numeric(lin_reg_dwd_urb$coefficients[1])
b <- as.numeric(lin_reg_dwd_urb$coefficients[2])
TH <- hoho %>%
mutate(origin = ifelse(is.na(th), "R", "H")) %>%
mutate(th = round(ifelse(is.na(th) == TRUE, temp_dwd_urb*b+a,th), digits = 3)) %>%
mutate(dttm = format(date_time, "%Y-%m-%d %H:%M:%S")) %>%
select(dttm, th, origin)# fill with best fitting data
#mutate(th = ifelse(is.na(th) == TRUE, temp_alu*b+a,th))
which(is.na(TH$th))
hoho_plot2.1<-hoho %>%
mutate(th = ifelse(is.na(th) == TRUE, temp_dwd_urb*b+a,th)) %>%
select(date_time, th, temp_dwd_urb) %>%
pivot_longer(cols = -c("date_time"),names_to ="station", values_to = "temp")
hoho_plot2.2 <- hoho %>%
mutate(th = ifelse(is.na(th) == TRUE, temp_dwd_urb*b+a,th)) %>%
pivot_longer(cols = -c("date_time"),names_to ="station", values_to = "temp" )
p2.1 <- ggplot(hoho_plot2.1, aes(x = date_time, y = temp, color = station))
p2.1 + geom_line() +
scale_color_manual(values=c("black","red"))
p2.2 <- ggplot(hoho_plot2.2, aes(x = date_time, y = temp, color = station))
p2.2 + geom_line() +
scale_color_manual(values=c("black", "black", "black" ,"black","red")) # showing the Hobo measurement in red to distiungish it from the rest.
resid <- hoho %>%
mutate(res_alu = ifelse(is.na(th)==FALSE, residuals(lin_reg_alu),NA)) %>%
mutate(res_dwd = ifelse(is.na(th)==FALSE, residuals(lin_reg_dwd),NA)) %>%
mutate(res_dwd_urb = ifelse(is.na(th)==FALSE, residuals(lin_reg_dwd_urb),NA)) %>%
mutate(res_wbi = ifelse(is.na(th)==FALSE, residuals(lin_reg_wbi),NA)) %>%
select(date_time,res_wbi,res_alu,res_dwd,res_dwd_urb) %>%
pivot_longer(c(-"date_time"), values_to = "residuals", names_to = "station")
p3 <- ggplot(resid, aes(x = date_time, y = residuals))
p3 +
geom_point() +
geom_hline(yintercept = 0, linetype = 1, color = "darkred", size =1) +
geom_hline(yintercept = 2, linetype = 2, color = "red", size =1.4) +
geom_hline(yintercept = -2, linetype = 2 , color = "red", size =1.4) +
facet_wrap(vars(station))
any(is.na(TH))
fwrite(TH,file ="C:/Users/anton/Desktop/Alles/Master/Data Collection and Storage/data/hobo/2023/hourly/10350060_TH.csv")
knitr::opts_chunk$set(echo = TRUE)
# more internal settings can go here
# Consider help pages like:
# https://rmarkdown.rstudio.com/lesson-1.html
# https://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf
# Load all packages here, consider to mute output of this code chunk
# https://rmarkdown.rstudio.com/lesson-3.html
require(RPostgreSQL)
require(getPass)
library(tidyverse)
library(sf)            # <- optional
library(plotly)        # <- optional
library(lubridate)
library(data.table)
library(zoo)
# If data preprocessing is needed, do it here.
# If you have specific functions, placed them here.
# If this code chunk is not needed, delete it.
# Load data from Github (then eval = TRUE)
raw <- read_csv("https://raw.githubusercontent.com/data-hydenv/data/master/hobo/2023/raw/10350060.csv", skip = 1)
cal <- read_csv("https://raw.githubusercontent.com/data-hydenv/data/master/hobo/2023/calibration.csv", skip = 3)
cal_hobo_digit <- which(parse_date_time(raw$`Datum Zeit, GMT+01:00`, "%m.%d.%y %H:%M:%S %p", tz = "CET" ) == force_tz(cal$dttm))
t_cal_hobo <- raw$`Temp., °C (LGR S/N: 10350060, SEN S/N: 10350060)`[cal_hobo_digit]
t_delta <- t_cal_hobo - cal$T
raw_1 <- raw[1:4] %>%
mutate(dttm1 = parse_date_time(raw[[2]], "%m.%d.%y %H:%M:%S %p", tz = "CET")) %>%
filter(dttm1 >= "2022-12-01 00:00:00", dttm1 <= "2023-01-07 23:50:00") %>%
mutate(dttm = format(dttm1,"%Y-%m-%d %H:%M")) %>%
mutate(id = `Anz.`-138) %>% # id starts by 1
mutate(temp = round(`Temp., °C (LGR S/N: 10350060, SEN S/N: 10350060)`- t_delta,digits = 3)) %>%
mutate(lux = `Intensität, Lux (LGR S/N: 10350060, SEN S/N: 10350060)`) %>%
select(id ,dttm ,temp ,lux)
write_csv(raw_1,file ="C:/Users/anton/Desktop/Alles/Master/Data Collection and Storage/data/hobo/2023/10_minutes/10350060.csv")
a <- Sys.time()
read_csv('https://raw.githubusercontent.com/data-hydenv/data/master/hobo/2023/10_minutes/10350060.csv')
b <- Sys.time()
c <-Sys.time()
read.table('https://raw.githubusercontent.com/data-hydenv/data/master/hobo/2023/10_minutes/10350060.csv')
d <- Sys.time()
e <- Sys.time()
fread('https://raw.githubusercontent.com/data-hydenv/data/master/hobo/2023/10_minutes/10350060.csv')
f <- Sys.time()
as_tibble (c(b-a,d-c,f-e)) %>%
mutate(import_function = c("read_csv()", "read.table()", "fread()")) %>%
rename(duration = value)
# Load data from Github (then eval = TRUE)
data <- fread('https://raw.githubusercontent.com/data-hydenv/data/master/hobo/2023/10_minutes/10350060.csv') %>%
mutate(dttm = parse_date_time(dttm, orders = "%Y-%m-%d %H:%M" )) %>%
mutate(dttm = force_tz(dttm, tz = "CET"))
head(data)
ggplot(data = data, mapping = aes(x = dttm, y = temp)) +
geom_line()
ggplot(data = data, mapping = aes(x = dttm, y = lux)) +
geom_line()
data <- data %>%
mutate(qc1 = case_when(temp > 70 &
temp < -20 ~ 1,
TRUE ~ 0)) #%>%
# mutate(qc1l = case_when(temp > 320000 &
#                         temp < 0 ~ 1,
#                         TRUE ~ 0))
sum(data$qc1)
#sum(data$qc1l)
data <- data %>%
mutate(qc2 = case_when(abs(lag(temp) - temp) < 1 ~ 0,TRUE ~ 1))
sum(data$qc2)
data[which(data$qc2 == 1),]
# code for qcp3 here
data <- data %>%
mutate(qc3 = case_when(rollmax(temp, k = 6 , fill = NA, align = "right",na.rm = TRUE) - rollapply(temp, 6 , fill = NA, align = "right", FUN = min, na.rm = TRUE) < 0.1 ~ 1, TRUE ~ 0))
sum(data$qc3)
# code for qcp4 here
data <- data %>%
mutate(SIC = case_when(lux <= 10 ~ "night",
lux > 10 & lux <= 500 ~ "sunriseorsunset",
lux > 500 & lux <= 2000 ~ "overcast(full)",
lux > 2000 & lux <= 15000 ~ "overcast(light)",
lux > 15000 & lux <= 20000 ~ "clearsky(shade)",
lux > 20000 & lux <= 50000 ~ "sunshine",
lux > 50000  ~ "sunshine(bright)",))
data %>%
count(SIC)
qc4_1 <- rep(0, length(data$SIC))
qc4_2 <- rep(0, length(data$SIC))
for(i in 2:length(data$SIC)){
if(i == "sunshine"){
qc4_1[i] <- 1 &
qc4_1[i-1] <- 1 &
qc4_1[i+1] <- 1}
}
for(i in 4:length(data$SIC)){
if(i == "sunshine(bright)"){
qc4_2[i] <- 1 &
qc4_2[i-1] <- 1 &
qc4_2[i+1] <- 1 &
qc4_2[i-2] <- 1 &
qc4_2[i+2] <- 1 &
qc4_2[i-3] <- 1 &
qc4_2[i+3] <- 1}
}
data <- data %>%
mutate(qc4_1 = qc4_1) %>%
mutate(qc4_2 = qc4_2)
data %>%
count(qc4_1)
data %>%
count(qc4_2)
# code for summarizing here
qc_df <- data %>%
mutate(qc_tot = qc1 + qc2 + qc3 + qc4_1 + qc4_2 ) %>%
mutate(qc_flag = if_else(qc_tot >= 1, 1, 0))
#mutate(flag_txt = if_else(qc_tot > 1, "bad", "good"))
data_plot <- data %>%
pivot_longer(
cols = c("qc1","qc2","qc3","qc4_1","qc4_2"),
names_to = "category", values_to ="sum") %>%
group_by(category) %>%
summarise(sum_qc = sum(sum))
ggplot(data_plot, mapping = aes(x = category, y=sum_qc ))+
geom_bar(stat = "identity")
print(data_plot)
qc_df
# code for aggregation here
hobo_hourly <- qc_df %>%
mutate(date = as.Date(dttm, tz ="CET")) %>%
mutate(day = day(dttm)) %>%
mutate(hour = hour(dttm)) %>%
mutate(date_time = floor_date(dttm, "hour")) %>%
group_by(date_time) %>%
summarise(temp = mean(temp), lux = mean(lux), qc_flag = sum(qc_flag)) %>%
mutate(th = round(ifelse(qc_flag > 1, NA, temp), digits =3)) %>%
select(date_time, th)
wd <- "C:/Users/anton/Desktop/Alles/Master/Data Collection and Storage/Projekt/"
wbi <- fread(paste0(wd,"meteo/WBI_meteo.csv")) %>%
mutate(date_time = parse_date_time(datetime,orders = "%Y-%m-%d %H:%M:%S", tz="CET")) %>%
filter(date_time >= "2022-12-01 00:00:00", date_time <= "2023-01-07 23:00:00") %>%
rename(temp_wbi = "Temperatur +20cm(avg)") %>%
select(date_time, temp_wbi)
alu <- fread(paste0(wd,"meteo/Freiburg_Garten_2022-12-01_2023-01-08.csv")) %>%
mutate(date_time = parse_date_time(Lokalzeit,orders = "%Y-%m-%d %H:%M:%S", tz="CET")) %>%
filter(date_time >= "2022-12-01 00:00:00", date_time <= "2023-01-07 23:00:00") %>%
rename(temp = "Lufttemperatur (°C)") %>%
mutate(temp = ifelse(temp == -999, NA,temp)) %>%
mutate(temp_alu = round(temp, digits = 3)) %>%
select(date_time, temp_alu)
dwd_urb <- fread(paste0(wd,"meteo/DWD_13667/produkt_air_temperature_13667_akt.txt")) %>%
mutate(date_time = parse_date_time(MESS_DATUM,orders = "%Y%m%d%H", tz="CET")) %>%
mutate(date_time = with_tz(date_time, tz = "CET")) %>%
filter(date_time >= "2022-12-01 00:00:00", date_time <= "2023-01-07 23:00:00") %>%
rename(temp = "LUFTTEMPERATUR") %>%
mutate(temp_dwd_urb = ifelse(temp == -999, NA,temp)) %>%
select(date_time, temp_dwd_urb)
dwd <- fread(paste0(wd,"meteo/DWD_1443/produkt_tu_stunde_20210712_20230112_01443.txt")) %>%
mutate(date_time = parse_date_time(MESS_DATUM,orders = "%Y%m%d%H")) %>%
mutate(date_time = with_tz(date_time, tz = "CET")) %>%
filter(date_time >= "2022-12-01 00:00:00", date_time <= "2023-01-07 23:00:00") %>%
rename(temp = "TT_TU") %>%
mutate(temp_dwd = ifelse(temp == -999, NA,temp)) %>%
select(date_time, temp_dwd)
summary(dwd)
summary(dwd_urb)
summary(wbi)
summary(alu)
hoho <- hobo_hourly %>%
left_join(y = dwd, by = "date_time",  ) %>%
left_join(y = dwd_urb, by = "date_time") %>%
left_join(y = wbi, by = "date_time") %>%
left_join(y = alu, by = "date_time")
hoho_plot <- hoho %>%
pivot_longer(cols = -c("date_time"),names_to ="station", values_to = "temp" )
p <- ggplot(hoho_plot, mapping = aes(x = date_time, y = temp,color = station))
p +
geom_line() +
theme_minimal() +
theme(legend.position = c(0.85,0.25))+
labs(title = "Comparison across stations",
subtitle = "",
x = "Date",
y = "Temperature (°C)")
summary(hoho)
lin_reg_dwd     <- lm(hoho$th~hoho$temp_dwd)
lin_reg_dwd_urb <- lm(hoho$th~hoho$temp_dwd_urb)
lin_reg_alu     <- lm(hoho$th~hoho$temp_alu)
lin_reg_wbi     <- lm(hoho$th~hoho$temp_wbi)
r_square <- as_tibble(summary(lin_reg_dwd)$r.squared) %>%
rename(r_dwd = value) %>%
mutate(r_dwd_urb = summary(lin_reg_dwd_urb)$r.squared) %>%
mutate(r_alu = summary(lin_reg_alu)$r.squared) %>%
mutate(r_wbi = summary(lin_reg_wbi)$r.squared)
a <- as.numeric(lin_reg_dwd_urb$coefficients[1])
b <- as.numeric(lin_reg_dwd_urb$coefficients[2])
TH <- hoho %>%
mutate(origin = ifelse(is.na(th), "R", "H")) %>%
mutate(th = round(ifelse(is.na(th) == TRUE, temp_dwd_urb*b+a,th), digits = 3)) %>%
mutate(dttm = format(date_time, "%Y-%m-%d %H:%M:%S")) %>%
select(dttm, th, origin)# fill with best fitting data
#mutate(th = ifelse(is.na(th) == TRUE, temp_alu*b+a,th))
which(is.na(TH$th))
hoho_plot2.1<-hoho %>%
mutate(th = ifelse(is.na(th) == TRUE, temp_dwd_urb*b+a,th)) %>%
select(date_time, th, temp_dwd_urb) %>%
pivot_longer(cols = -c("date_time"),names_to ="station", values_to = "temp")
hoho_plot2.2 <- hoho %>%
mutate(th = ifelse(is.na(th) == TRUE, temp_dwd_urb*b+a,th)) %>%
pivot_longer(cols = -c("date_time"),names_to ="station", values_to = "temp" )
p2.1 <- ggplot(hoho_plot2.1, aes(x = date_time, y = temp, color = station))
p2.1 + geom_line() +
scale_color_manual(values=c("black","red"))
p2.2 <- ggplot(hoho_plot2.2, aes(x = date_time, y = temp, color = station))
p2.2 + geom_line() +
scale_color_manual(values=c("black", "black", "black" ,"black","red")) # showing the Hobo measurement in red to distiungish it from the rest.
resid <- hoho %>%
mutate(res_alu = ifelse(is.na(th)==FALSE, residuals(lin_reg_alu),NA)) %>%
mutate(res_dwd = ifelse(is.na(th)==FALSE, residuals(lin_reg_dwd),NA)) %>%
mutate(res_dwd_urb = ifelse(is.na(th)==FALSE, residuals(lin_reg_dwd_urb),NA)) %>%
mutate(res_wbi = ifelse(is.na(th)==FALSE, residuals(lin_reg_wbi),NA)) %>%
select(date_time,res_wbi,res_alu,res_dwd,res_dwd_urb) %>%
pivot_longer(c(-"date_time"), values_to = "residuals", names_to = "station")
p3 <- ggplot(resid, aes(x = date_time, y = residuals))
p3 +
geom_point() +
geom_hline(yintercept = 0, linetype = 1, color = "darkred", size =1) +
geom_hline(yintercept = 2, linetype = 2, color = "red", size =1.4) +
geom_hline(yintercept = -2, linetype = 2 , color = "red", size =1.4) +
facet_wrap(vars(station))
pw <- function () {
if (Sys.getenv('POSTGRES_PASSWORD') == ""){
return(getPass('Provide the password: '))
} else {
return(Sys.getenv('POSTGRES_PASSWORD'))
}
}
# establish the connection
drv <- dbDriver('PostgreSQL')
con <- dbConnect(drv, host='hydenv.hydrocode.de', port=5432, user='hydenv',
password=pw(), dbname='hydenv')
pw <- function () {
if (Sys.getenv('POSTGRES_PASSWORD') == ""){
return(getPass('Provide the password: '))
} else {
return(Sys.getenv('POSTGRES_PASSWORD'))
}
}
# establish the connection
drv <- dbDriver('PostgreSQL')
con <- dbConnect(drv, host='hydenv.hydrocode.de', port=5432, user='hydenv',
password=pw(), dbname='hydenv')
# establish the connection
drv <- dbDriver('PostgreSQL')
con <- dbConnect(drv, host='hydenv.hydrocode.de', port=5432, user='hydenv',
password=pw(), dbname='hydenv')
```
#knitr::opts_chunk$set(echo = FALSE)
# require the package
if (!("RPostgreSQL" %in% installed.packages())){
install.packages("RPostgreSQL")
}
if (!("getPass" %in% installed.packages())){
install.packages("getPass")
}
library(RPostgreSQL)
library(getPass)
pw <- function () {
if (Sys.getenv('POSTGRES_PASSWORD') == ""){
return(getPass('Provide the password: '))
} else {
return(Sys.getenv('POSTGRES_PASSWORD'))
}
}
# establish the connection
drv <- dbDriver('PostgreSQL')
con <- dbConnect(drv, host='hydenv.hydrocode.de', port=5432, user='hydenv',
password=pw(), dbname='hydenv')
if (!("RPostgreSQL" %in% installed.packages())){
install.packages("RPostgreSQL")
}
if (!("getPass" %in% installed.packages())){
install.packages("getPass")
}
library(RPostgreSQL)
library(getPass)
pw <- function () {
if (Sys.getenv('POSTGRES_PASSWORD') == ""){
return(getPass('Provide the password: '))
} else {
return(Sys.getenv('POSTGRES_PASSWORD'))
}
}
# establish the connection
drv <- dbDriver('PostgreSQL')
con <- dbConnect(drv, host='hydenv.hydrocode.de', port=5432, user='hydenv',
password=pw(), dbname='hydenv')
